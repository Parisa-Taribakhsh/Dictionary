{"version":3,"sources":["Components/MyDictionary.js","Components/Logins.js","Components/NotFound.js","Components/App.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","MyDictionary","useState","wordsList","setWordsList","newWord","setNewWord","definition","setDefinition","isOpen","key","deleteConfirmBox","setDeleteConfirmBox","item","openEditBox","setOpenEditBox","classes","useEffect","getWordsList","axios","get","then","response","Object","entries","data","reverse","map","value","catch","finally","className","TextField","id","placeholder","multiline","variant","onChange","e","target","Button","color","onClick","preventDefault","post","word","addWord","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","i","Dialog","dir","open","keepMounted","onClose","DialogContent","DialogContentText","DialogActions","delete","filteredWordsList","filter","console","log","put","Logins","NotFound","App","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a5525a8.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, TextField} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nfunction MyDictionary() {\r\n    const [wordsList, setWordsList] = useState([]);\r\n    const [newWord, setNewWord] = useState('');\r\n    const [definition, setDefinition] = useState('');\r\n    const [deleteConfirmBox, setDeleteConfirmBox] = useState({isOpen: false, key: {}});\r\n    const [openEditBox, setOpenEditBox] = useState({isOpen: false, item: {}});\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n          getWordsList()\r\n        }, []\r\n    )\r\n\r\n    let getWordsList=()=>{\r\n        axios.get(`https://dictionary-d48c1-default-rtdb.firebaseio.com/words.json`)\r\n            .then(response => {\r\n                setWordsList(Object.entries(response.data).reverse().map(([key, value]) => {\r\n                    return {\r\n                        ...value,\r\n                        key\r\n                    }\r\n                }))\r\n            })\r\n            .catch(() => {\r\n            })\r\n            .finally(() => {\r\n            })\r\n    }\r\n\r\n\r\n    function addWord(word, definition) {\r\n        setWordsList(wordsList => [\r\n                {\r\n                    word,\r\n                    definition,\r\n                },\r\n            ...wordsList\r\n            ]\r\n        );\r\n    }\r\n\r\n    function addNewWord(e) {\r\n        if(!newWord && !definition ){\r\n            return\r\n        }\r\n        e.preventDefault();\r\n        axios.post(`https://dictionary-d48c1-default-rtdb.firebaseio.com/words.json`, {\r\n            word: newWord,\r\n            definition: definition\r\n        })\r\n            .then(() => {\r\n                addWord(newWord, definition);\r\n                setNewWord('');\r\n                setDefinition('');\r\n                getWordsList()\r\n            })\r\n            .catch(() => {\r\n            })\r\n            .finally(() => {\r\n            })\r\n    }\r\n\r\n    let inputWordHandler = e => setNewWord(e.target.value)\r\n    let inputDefinitionHandler = e => setDefinition(e.target.value)\r\n    let wordsEditHandler =e => setOpenEditBox({isOpen: true, item: {key:openEditBox.item.key,word:e.target.value,definition:openEditBox.item.definition}})\r\n    let definitionsEditHandler =e=>  setOpenEditBox({isOpen: true, item: {key:openEditBox.item.key,word:openEditBox.item.word,definition:e.target.value}})\r\n    let editModalHandler =item=> setOpenEditBox({isOpen: true, item})\r\n    let deleteModalHandler =key=>setDeleteConfirmBox({isOpen: true, key})\r\n\r\n\r\n    function deleteWord() {\r\n        axios.delete(`https://dictionary-d48c1-default-rtdb.firebaseio.com/words/${deleteConfirmBox.key}.json`)\r\n            .then(() => {\r\n                    let filteredWordsList = wordsList.filter((row) => row.key !== deleteConfirmBox.key)\r\n                    setWordsList(\r\n                        filteredWordsList\r\n                    )\r\n                }\r\n            )\r\n            .catch(() => {\r\n            })\r\n            .finally(() => {\r\n                setDeleteConfirmBox({isOpen: false, key: {}})\r\n            });\r\n    }\r\n\r\n    let editWord =()=>{\r\n        console.log(openEditBox)\r\n        axios.put(`https://dictionary-d48c1-default-rtdb.firebaseio.com/words/${openEditBox.item.key}.json`,{\r\n            key :openEditBox.item.key,\r\n            word: openEditBox.item.word,\r\n            definition: openEditBox.item.definition,\r\n        })\r\n            .then(()=>{setOpenEditBox({isOpen: false, item: {}})})\r\n            .catch(() => {})\r\n            .finally(()=>{getWordsList()});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className='container text-center p-5'>\r\n                    <div className='row'>\r\n                        <div className='col-12 col-lg-5 my-2'>\r\n                            <TextField\r\n                                id=\"outlined-textarea\"\r\n                                placeholder=\"write the word\"\r\n                                value={newWord}\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                                className='w-100'\r\n                                onChange={inputWordHandler}\r\n                            />\r\n                        </div>\r\n                        <div className='col-12 col-lg-5 my-2'>\r\n                            <TextField\r\n                                id=\"outlined-textarea\"\r\n                                placeholder=\"Write your definition\"\r\n                                value={definition}\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                                className='w-100'\r\n                                onChange={inputDefinitionHandler}\r\n                            />\r\n                        </div>\r\n                        <div className='col-12 col-lg-2 my-auto my-2'>\r\n                            <Button variant=\"contained\" color=\"secondary\"\r\n                                    onClick={addNewWord}>\r\n                                ADD\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <TableContainer component={Paper} className='p-5 table-bordered'>\r\n                        <Table className={classes.table} aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"left\">Words</TableCell>\r\n                                    <TableCell align=\"left\">Definitions</TableCell>\r\n                                    <TableCell align=\"left\">edit</TableCell>\r\n                                    <TableCell align=\"left\">delete</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {wordsList.map((row, i) => (\r\n                                    <TableRow key={i}>\r\n                                        <TableCell align=\"left\">{row.word}</TableCell>\r\n                                        <TableCell align=\"left\">{row.definition}</TableCell>\r\n                                        <TableCell align=\"left\" onClick={() => {\r\n                                            editModalHandler(row)\r\n                                        }}>edit</TableCell>\r\n                                        <TableCell align=\"left\" onClick={() => {\r\n                                            deleteModalHandler(row.key)\r\n                                        }}>delete</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    {/*DELETE_DIALOG*/}\r\n                    <Dialog\r\n                        dir=\"ltr\"\r\n                        open={deleteConfirmBox.isOpen}\r\n                        keepMounted\r\n                        onClose={() => setDeleteConfirmBox({isOpen: false, key: {}})}\r\n                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                        aria-describedby=\"alert-dialog-slide-description\"\r\n                    >\r\n                        <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                \"Do you want to delete this word?\"\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => setDeleteConfirmBox({isOpen: false, key: {}})}>\r\n                                close\r\n                            </Button>\r\n                            <Button color=\"secondary\" onClick={() => deleteWord(deleteConfirmBox)}>\r\n                                Delete\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                    {/*EDIT_DIALOG*/}\r\n                    <Dialog\r\n                        dir=\"ltr\"\r\n                        open={openEditBox.isOpen}\r\n                        keepMounted\r\n                        onClose={() => setOpenEditBox({isOpen: false, item: {}})}\r\n                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                        aria-describedby=\"alert-dialog-slide-description\"\r\n                    >\r\n                        <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-slide-description\">\r\n                            </DialogContentText>\r\n                            <div className='container text-center p-5'>\r\n                                <div className='row'>\r\n                                    <div className='col-12 col-lg-5 my-2'>\r\n                                        <TextField\r\n                                            id=\"outlined-textarea\"\r\n                                            placeholder=\"write the word\"\r\n                                            multiline\r\n                                            value={openEditBox.item.word}\r\n                                            variant=\"outlined\"\r\n                                            className='w-100'\r\n                                            onChange={wordsEditHandler}\r\n                                        />\r\n                                    </div>\r\n                                    <div className='col-12 col-lg-5 my-2'>\r\n                                        <TextField\r\n                                            id=\"outlined-textarea\"\r\n                                            placeholder=\"Write your definition\"\r\n                                            multiline\r\n                                            value={openEditBox.item.definition}\r\n                                            variant=\"outlined\"\r\n                                            className='w-100'\r\n                                            onChange={definitionsEditHandler}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => setOpenEditBox({isOpen: false, item: {}})}>\r\n                                close\r\n                            </Button>\r\n                            <Button color=\"secondary\" onClick={()=>editWord(openEditBox)}>\r\n                                Edit\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MyDictionary","import React from 'react';\r\n\r\nfunction Logins(){\r\n\r\nreturn(\r\n<div>\r\n    LOGIN PAGE\r\n</div>\r\n)\r\n}\r\n\r\nexport default Logins","import React from 'react';\r\n\r\nfunction NotFound(){\r\n\r\n    return(\r\n        <div>\r\n            404 Not Found\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import '../styles/App.css';\r\nimport {Switch,Route} from \"react-router-dom\";\r\nimport MyDictionary from \"./MyDictionary\";\r\nimport Logins from \"./Logins\";\r\nimport NotFound from \"./NotFound\";\r\n\r\nfunction App() {\r\n    return (\r\n   <>\r\n       <Switch>\r\n           <Route path ='/my-dictionary' exact component={MyDictionary}/>\r\n           <Route path ='/' exact component={MyDictionary}/>\r\n           <Route path='/login' exact component={Logins}/>\r\n           <Route path ='' exact component={NotFound}/>\r\n       </Switch>\r\n       </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   <BrowserRouter>\r\n       <App />\r\n   </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}